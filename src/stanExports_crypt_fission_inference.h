// Generated by rstantools.  Do not edit by hand.

/*
    RHClones is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    RHClones is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with RHClones.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_crypt_fission_inference_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_crypt_fission_inference");
    reader.add_event(52, 50, "end", "model_crypt_fission_inference");
    return reader;
}
#include <stan_meta_header.hpp>
class model_crypt_fission_inference
  : public stan::model::model_base_crtp<model_crypt_fission_inference> {
private:
        int N;
        int max_patch;
        vector_d age;
        vector_d num_crypts;
        std::vector<std::vector<int> > counts;
public:
    model_crypt_fission_inference(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_crypt_fission_inference(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_crypt_fission_inference_namespace::model_crypt_fission_inference";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "max_patch", "int", context__.to_vec());
            max_patch = int(0);
            vals_i__ = context__.vals_i("max_patch");
            pos__ = 0;
            max_patch = vals_i__[pos__++];
            current_statement_begin__ = 4;
            validate_non_negative_index("age", "N", N);
            context__.validate_dims("data initialization", "age", "vector_d", context__.to_vec(N));
            age = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("age");
            pos__ = 0;
            size_t age_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < age_j_1_max__; ++j_1__) {
                age(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "age", age, 0);
            current_statement_begin__ = 5;
            validate_non_negative_index("num_crypts", "N", N);
            context__.validate_dims("data initialization", "num_crypts", "vector_d", context__.to_vec(N));
            num_crypts = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("num_crypts");
            pos__ = 0;
            size_t num_crypts_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < num_crypts_j_1_max__; ++j_1__) {
                num_crypts(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "num_crypts", num_crypts, 0);
            current_statement_begin__ = 6;
            validate_non_negative_index("counts", "N", N);
            validate_non_negative_index("counts", "max_patch", max_patch);
            context__.validate_dims("data initialization", "counts", "int", context__.to_vec(N,max_patch));
            counts = std::vector<std::vector<int> >(N, std::vector<int>(max_patch, int(0)));
            vals_i__ = context__.vals_i("counts");
            pos__ = 0;
            size_t counts_k_0_max__ = N;
            size_t counts_k_1_max__ = max_patch;
            for (size_t k_1__ = 0; k_1__ < counts_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < counts_k_0_max__; ++k_0__) {
                    counts[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t counts_i_0_max__ = N;
            size_t counts_i_1_max__ = max_patch;
            for (size_t i_0__ = 0; i_0__ < counts_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < counts_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "counts[i_0__][i_1__]", counts[i_0__][i_1__], 0);
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 12;
            validate_non_negative_index("rho", "N", N);
            num_params_r__ += N;
            current_statement_begin__ = 13;
            num_params_r__ += 1;
            current_statement_begin__ = 14;
            num_params_r__ += 1;
            current_statement_begin__ = 15;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_crypt_fission_inference() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 12;
        if (!(context__.contains_r("rho")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        validate_non_negative_index("rho", "N", N);
        context__.validate_dims("parameter initialization", "rho", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> rho(N);
        size_t rho_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            rho(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, rho);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 13;
        if (!(context__.contains_r("pop_mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pop_mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pop_mu");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "pop_mu", "double", context__.to_vec());
        double pop_mu(0);
        pop_mu = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, pop_mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pop_mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 14;
        if (!(context__.contains_r("pop_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pop_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pop_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "pop_sd", "double", context__.to_vec());
        double pop_sd(0);
        pop_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, pop_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pop_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 15;
        if (!(context__.contains_r("pop_nu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pop_nu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pop_nu");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "pop_nu", "double", context__.to_vec());
        double pop_nu(0);
        pop_nu = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, pop_nu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pop_nu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 12;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rho;
            (void) rho;  // dummy to suppress unused var warning
            if (jacobian__)
                rho = in__.vector_lb_constrain(0, N, lp__);
            else
                rho = in__.vector_lb_constrain(0, N);
            current_statement_begin__ = 13;
            local_scalar_t__ pop_mu;
            (void) pop_mu;  // dummy to suppress unused var warning
            if (jacobian__)
                pop_mu = in__.scalar_lb_constrain(0, lp__);
            else
                pop_mu = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 14;
            local_scalar_t__ pop_sd;
            (void) pop_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                pop_sd = in__.scalar_lb_constrain(0, lp__);
            else
                pop_sd = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 15;
            local_scalar_t__ pop_nu;
            (void) pop_nu;  // dummy to suppress unused var warning
            if (jacobian__)
                pop_nu = in__.scalar_lb_constrain(0, lp__);
            else
                pop_nu = in__.scalar_lb_constrain(0);
            // model body
            {
            current_statement_begin__ = 19;
            validate_non_negative_index("prob_i", "max_patch", max_patch);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> prob_i(max_patch);
            stan::math::initialize(prob_i, DUMMY_VAR__);
            stan::math::fill(prob_i, DUMMY_VAR__);
            current_statement_begin__ = 20;
            int n_vals(0);
            (void) n_vals;  // dummy to suppress unused var warning
            stan::math::fill(n_vals, std::numeric_limits<int>::min());
            current_statement_begin__ = 21;
            local_scalar_t__ p2_rnd(DUMMY_VAR__);
            (void) p2_rnd;  // dummy to suppress unused var warning
            stan::math::initialize(p2_rnd, DUMMY_VAR__);
            stan::math::fill(p2_rnd, DUMMY_VAR__);
            current_statement_begin__ = 23;
            lp_accum__.add(normal_log<propto__>(pop_mu, 0, 1e-2));
            current_statement_begin__ = 24;
            lp_accum__.add(normal_log<propto__>(pop_sd, 0, 1e-2));
            current_statement_begin__ = 25;
            lp_accum__.add(gamma_log<propto__>(pop_nu, 2, 0.1));
            current_statement_begin__ = 32;
            lp_accum__.add(student_t_log<propto__>(rho, pop_nu, pop_mu, pop_sd));
            current_statement_begin__ = 35;
            for (int j = 1; j <= N; ++j) {
                current_statement_begin__ = 36;
                for (int k = 1; k <= max_patch; ++k) {
                    current_statement_begin__ = 37;
                    stan::model::assign(prob_i, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                (pow((1 - stan::math::exp((-(get_base1(rho, j, "rho", 1)) * get_base1(age, j, "age", 1)))), k) / ((get_base1(rho, j, "rho", 1) * get_base1(age, j, "age", 1)) * k)), 
                                "assigning variable prob_i");
                }
                current_statement_begin__ = 40;
                stan::math::assign(n_vals, (get_base1(get_base1(counts, j, "counts", 1), 1, "counts", 2) + (2 * get_base1(get_base1(counts, j, "counts", 1), 2, "counts", 2))));
                current_statement_begin__ = 41;
                stan::math::assign(p2_rnd, ((6.0 * (n_vals - 1)) / (2 * get_base1(num_crypts, j, "num_crypts", 1))));
                current_statement_begin__ = 42;
                if (as_bool(logical_lt(p2_rnd, 0))) {
                    current_statement_begin__ = 42;
                    stan::math::assign(p2_rnd, 0);
                }
                current_statement_begin__ = 43;
                stan::model::assign(prob_i, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                            (get_base1(prob_i, 2, "prob_i", 1) + p2_rnd), 
                            "assigning variable prob_i");
                current_statement_begin__ = 44;
                stan::model::assign(prob_i, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            (1 - (sum(prob_i) - get_base1(prob_i, 1, "prob_i", 1))), 
                            "assigning variable prob_i");
                current_statement_begin__ = 46;
                stan::math::assign(prob_i, divide(prob_i, sum(prob_i)));
                current_statement_begin__ = 47;
                lp_accum__.add(multinomial_log<propto__>(get_base1(counts, j, "counts", 1), prob_i));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("rho");
        names__.push_back("pop_mu");
        names__.push_back("pop_sd");
        names__.push_back("pop_nu");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_crypt_fission_inference_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> rho = in__.vector_lb_constrain(0, N);
        size_t rho_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            vars__.push_back(rho(j_1__));
        }
        double pop_mu = in__.scalar_lb_constrain(0);
        vars__.push_back(pop_mu);
        double pop_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(pop_sd);
        double pop_nu = in__.scalar_lb_constrain(0);
        vars__.push_back(pop_nu);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_crypt_fission_inference";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t rho_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "pop_mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pop_sd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pop_nu";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t rho_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "pop_mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pop_sd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "pop_nu";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_crypt_fission_inference_namespace::model_crypt_fission_inference stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
